+-------------------------------
| DIAMOND                            
| DIAlectical MOdels eNcodiNg         
|

==============
 Requirements

 + Python (3.3.0)
 + clingo (4.3.0)
 + eclipse-prolog (6.1)
 + to use the CL-Script "diamond.py" a Unix-like operating system is needed

==============
 Installation

 -) The newest version is available at https://sourceforge.net/projects/diamond-adf
 -) Extract the tar-ball to a directory
 -) At the first run of the diamond.py script a config file is created (at the 
    specified location via the -cfg option or at ~/.diamond per default)
 -) If the required programs are not in the $PATH environment, set their locations 
    in the configuration file

==============
 Configuration

The default configuration file looks as follows:
[Path]
installdir = <location of the diamond.py script>
eclipse = eclipse
clingo = clingo
python = python

==============
 Usage - with the diamond script (recommended)

usage: diamond.py [-h] [-cfi] [-nai] [-stg] [-sem] [-mod] [-stm] [-grd] [-com]
                  [-adm] [-prf] [-t] [-c CFGFILE] [-pf | -pfe | -pfr] [-all]
                  [--version]
                  instance

Program to compute different models and sets for a given ADF

positional arguments:
  instance              Filename of the ADF instance

optional arguments:
  -h, --help            show this help message and exit
  -cfi, --conflict-free
                        compute the conflict-free interpretations
  -nai, --naive         compute the naive interpretations
  -stg, --stage         compute the stage interpretations
  -sem, --semi-model    compute the semi-model interpretations
  -mod, --model         compute the two-valued models
  -stm, --stablemodel   compute the stable models
  -grd, --grounded      compute the grounded interpretation
  -com, --complete      compute the complete interpretations
  -adm, --admissible    compute the admissible interpretations
  -prf, --preferred     compute the preferred interpretations
  -t, --transform       print the transformed adf to stdout
  -c CFGFILE            specify a config-file
  -pf, --transform_pform
                        acceptance functions are given as propositional
                        formulas (translation using ASP)
  -pfe, --transform_pform_eclipse
                        acceptance functions are given as propositional
                        formulas (translation using Eclipse Prolog)
  -pfr, --transform_prio
                        transform a prioritized ADF before the computation
  -all, --all           compute interpretations for all semantics
  --version             prints the current version

==============
 Usage - without the diamond script

To compute the models without the diamond script use the following commands 
(Note: those are Unix-Shell commands. For windows use the appropriate commands.)

+----------------+------------------------------------------------------+
| semantics      | asp-encodings needed                                 | 
+----------------+------------------------------------------------------+
| conflict-free  | base.lp, op.lp, cfi.lp                               |
| model          | base.lp, cf.lp, model.lp                             | 
| stable model   | base.lp, cf.lp, model.lp, opsm.lp, 3KK.lp, stable.lp | 
| grounded       | base.lp, op.lp, 3KK.lp grounded.lp                   | 
| complete       | base.lp, op.lp, complete.lp                          | 
| admissible     | base.lp, op.lp, admissible.lp                        | 
+----------------+------------------------------------------------------+

 semantics       example call (BASH)

 conflict-free   clingo base.lp op.lp cfi.lp instance.lp show.lp 0
 model           clingo base.lp cf.lp instance.lp show.lp 0
 stable model    clingo base.lp cf.lp model.lp opsm.lp 3KK.lp stable.lp instance.lp show.lp 0
 grounded model  clingo base.lp cf.lp 3KK.lp grounded.lp instance.lp show.lp 0
 complete model  clingo base.lp op.lp complete.lp instance.lp show.lp 0
 admissible      clingo base.lp op.lp admissible.lp instance.lp show.lp 0

To transform an ADF from the propostional formula representation use
eclipse -b transform.pl -e main -- <instance>

To transform an ADF from the prioritized representation use
python transform.py <instance>

For bipolar ADFs, use the predicates sup/2 and att/2 instead of l/2 to specify
supporting and attacking links between statements; and ac/2 to specify
acceptance formulas as in the input format of ADFsys.

To compute the semantics of bipolar ADFs, use the following encodings:

+----------------+------------------------------------------------------+
| semantics      | asp-encodings needed                                 | 
+----------------+------------------------------------------------------+
| conflict-free  | bop.lp, cfi.lp					|
| grounded       | bop.lp, 3KK.lp grounded.lp				| 
| complete       | bop.lp, complete.lp              	                | 
| model          | bop.lp, complete.lp, twovalued.lp                    | 
| admissible     | bop.lp, admissible.lp                       		| 
+----------------+------------------------------------------------------+

There is also an efficient encoding of the model semantics that only needs
the predicates s/1 and ac/2. Call "clingo fmodel.lp show.lp instance.lp 0".